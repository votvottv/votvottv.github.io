{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Onion Launchpad","text":"<p>Onion Launchpad is a customizable landing page for organizations and individuals to advertise their onion addresses to their audiences. The landing page is easy to navigate and describes to users how to connect to an Onion Service.</p> <p>The landing page is based on lego and offers localized content about how to download Tor Browser, connect to the Tor network, and access an Onion Service.</p> <p>It's a statically built website that can be easily deployed.</p> <ul> <li>Check the live demo!</li> <li>More on Onion Services.</li> <li>Localization at Tor.</li> <li>Tor Browser manual.</li> </ul>"},{"location":"analytics/","title":"Analytics","text":"<p>Onion Launchpad supports a basic analytics gathering based on Matomo:</p> <ol> <li>The feature is disabled by default, and enabled only if some environment    variables are set.</li> <li>This feature, even with a better configuration in terms of privacy, could    still be a point of collecting access data without passing to the Tor    network for better anonymization. And also would rely on additional JavaScript    code embedded in the landing page.</li> <li>Services operators are be recommended to host the backend only behind an    HTTPS proxy without IP logging (and without passing the source IP to the    backend, so if there's any backend vulnerability it won't be possible to    attackers to discover user's IP addresses). Or even better: leave the    backend behind an Onion Service.</li> <li>There is also a consent UX informing users what and how it's    collected, and asking for authorization. No cookies reside in the    client machine.</li> <li>The analytics collection is bypassed entirely if the Do Not Track    configuration is set. Onion Launchpad respects this setting    even if it's considered deprecated.</li> </ol> <p>It's also worth noting that adversaries could attack the analytics system by:</p> <ol> <li>Intercepting DNS Queries in the form of <code>myanalytics.example.org</code> that may    disclose information:<ul> <li>That an analytics platform exists.</li> <li>That the user is giving information to this platform.</li> </ul> </li> <li>Adding fake access data into the metrics system.</li> <li>Censoring the analytics endpoint so the user browser cannot reach it in    order to send access data.</li> <li>DDoS'ing the analytics backend.</li> <li>Exploiting vulnerabilities in the backend to extract data.</li> </ol> <p>The analytics functionality is controlled by these environment variables:</p> <ul> <li><code>LEKTOR_ANALYTICS</code>: when set to <code>1</code>, enables the analytics collection.</li> <li><code>LEKTOR_ANALYTICS_BACKEND</code>: contains the base URL of the Matomo instance.   Example: <code>https://myanalytics.example.org/</code>. Onion Launchpad will then point    to both <code>https://myanalytics.example.org/matomo.js</code> and   <code>https://myanalytics.example.org/matomo.php</code>.</li> <li><code>LEKTOR_ANALYTICS_SITE_ID</code>: should be set to the Matomo <code>siteId</code> configured    in the backend.</li> <li><code>LEKTOR_ANALYTICS_LINK_TRACKING</code>: when set to 1, activates Matomo's   <code>enableLinkTracking</code> setting, otherwise keep it off.</li> <li><code>LEKTOR_ANALYTICS_BROWSER_DETECTION</code>: when set to 1, use Matomo's   browser feature detection, otherwise enforces <code>disableBrowserFeatureDetection</code>.   You might want to turn this on if your Matomo backend is too   old, since disabling of browser detection was implemented only recently.</li> <li><code>LEKTOR_ANALYTICS_PRIVACY_POLICY_URL</code>: an URL for the privacy policy, as per   best practices on analytics gathering.</li> <li><code>LEKTOR_ANALYTICS_BACKGROUND_COLOR</code>: the background color for the consent UX,   in hexadecimal format (<code>ffffff</code>).</li> </ul> <p>Check Matomo's JavaScript Tracking Client documentation for details.</p>"},{"location":"build/","title":"Building","text":"<p>There are some documented ways in how to setup your development or deployment environment for this project:</p> <ol> <li>Using a CI/CD system such as GitLab CI/CD.</li> <li>Using Docker and Docker Compose.</li> <li>Using GitLab Runner.</li> <li>Using PyEnv.</li> <li>Setting up your environment manually.</li> </ol> <p>They are explained in the following sections, and of course you can also proceed with your own procedure if nothing else fits. They're tested with [Debian][]-like operating systems.</p> <p>The procedures can also be executed inside a virtual machine, preferably using [Debian][].</p>"},{"location":"build/#environment-file","title":"Environment file","text":"<p>The <code>LEKTOR_*</code> and other environment variables can be stored in the <code>.env</code> configuration file.</p>"},{"location":"build/#helper-scripts","title":"Helper scripts","text":"<p>Also, number of helper scripts are available to aid development, testing and deployment:</p> <ul> <li><code>scripts/provision-docker-compose</code>: installs Docker Compose in a [Debian][]-based   system.</li> <li><code>provision-gitlab-runner</code>: installs GitLab Runner in a [Debian][]-based system.</li> <li><code>provision-pyenv</code>: install PyEnv locally at user's <code>$HOME/.pyenv</code>.</li> <li><code>provision</code>: setus up the basic system environment (system-wide packages).</li> <li><code>env</code>: sets up the basic Python environment needed to build the landing pages   (local Python packages).</li> <li><code>build</code>: the actual build script.</li> <li><code>build-with-gitlab-runner</code>: build the landing page using GitLab Runner.</li> <li><code>server</code>: wrapper around lektor server.</li> <li><code>server-public</code>: basic HTTP server used to inspect build artifacts stored at   the <code>public/</code> folder.</li> </ul>"},{"location":"build/#using-a-cicd-system-such-as-gitlab-cicd","title":"Using a CI/CD system such as GitLab CI/CD","text":"<p>For GitLab CI/CD we provide two configurations:</p> <ol> <li>.gitlab-ci.yml: the standard CI/CD used when the project    is hosted at https://gitlab.torproject.org.</li> <li>.gitlab-ci-deployment.yml: the CI/CD configuration    when the repository is hosted in other GitLab instances.</li> </ol>"},{"location":"build/#using-docker-and-docker-compose","title":"Using Docker and Docker Compose","text":"<p>Make sure you have Docker and Docker Compose properly installed. The provision-docker-compose script serves as an example in how to do that.</p> <p>Then proceed as usual:</p> <pre><code>docker-compose up\n</code></pre> <p>This should build the container image and bring a service container running <code>lektor server</code> with a HTTP server listening at http://localhost:5000.</p> <p>As an alternative, it's possible to use the provided Dockerfile for serving a statically built landing page.</p>"},{"location":"build/#using-gitlab-runner","title":"Using GitLab Runner","text":"<p>The GitLab Runner approach is aimed to test the CI configuration for deployment directly through a GitLab Runner instance locally installed in your computer.</p> <p>Install GitLab Runner according to the docs or using the provided provision-gitlab-runner script.</p> <p>Then proceed running the corresponding build script:</p> <pre><code>scripts/build-with-gitlab-runner\n</code></pre> <p>If the build is successful, the resulting site will be available at the <code>public/</code> folder and can be browser using a HTTP server such the one provided by this repository which listens on http://localhost:5000:</p> <pre><code>scripts/server-public\n</code></pre>"},{"location":"build/#using-pyenv","title":"Using PyEnv","text":"<p>Another approach is to use PyEnv to setup your environment with the required Python version needed to build the landing page.</p> <p>The provision-pyenv script has an example in how to do that, which should run after the provision script.</p> <pre><code>scripts/provision\nscripts/provision-pyenv\n</code></pre> <p>Then you can simply use the provided build script:</p> <pre><code>scripts/build\n</code></pre> <p>You can also manually invoke Lektor like this:</p> <pre><code>source scripts/env\nlektor clean --yes\nlektor server\n</code></pre> <p>The virtualenv is created by default inside of your <code>$HOME/.virtualenvs</code> folder, but that can be customized with the <code>$VENV</code> shell environment variable.</p>"},{"location":"build/#setting-up-your-environment-manually","title":"Setting up your environment manually","text":"<p>You might use this approach if you prefer a customized way to install the required Python version and/or you already have your own Lektor workflow.</p> <p>First install the required Python version, whose exact number can be found in the Dockerfile or at the .gitlab-ci-deployment.yml file.</p> <p>A suggested way is running this command sequence:</p> <pre><code>lektor-venv &amp;&amp; source .env &amp;&amp; lektor clean --yes &amp;&amp; lektor server\n</code></pre> <p>where <code>lektor-venv</code> is a bash function that sets up a <code>venv</code>, and <code>.env</code> is literally just a file exporting the <code>LEKTOR_*</code> environment variables:</p> <pre><code>lektor-venv ()\n{\n    VENV=\"${VENV:-$HOME/.virtualenvs/onion-launchpad}\n\n    [ -d \"$VENV\" ] &amp;&amp; source \"$VENV/bin/activate\" &amp;&amp; \\\n      echo 'virtualenv found in \"$VENV\" and activated' &amp;&amp; return;\n\n    python3.8 -m venv \"$VENV\" &amp;&amp; source \"$VENV/bin/activate\" &amp;&amp; \\\n      pip install --upgrade pip lektor &amp;&amp; echo 'virtualenv set up in \"$VENV\" and activated'\n}\n</code></pre> <p>Make sure to:</p> <ul> <li>Replace <code>python3.8</code> with the required Python version, if needed.</li> <li>Set the <code>$VENV</code> shell environment variable according to your preference.</li> </ul>"},{"location":"customize/","title":"Customizing","text":"<p>Several parts of the site are configured through environment variables during the Lektor build. These variables are:</p> <ul> <li><code>LEKTOR_FOREGROUND_COLOR</code>: This is the foreground/main site color in RGB hexadecimal format (<code>ffffff</code>).</li> <li><code>LEKTOR_BACKGROUND_COLOR</code>: This is the background/accent site color in RGB hexadecimal format.</li> <li><code>LEKTOR_BUTTON_COLOR</code>: This is the button color in RGB hexadecimal format -                          might be the same as the foreground.</li> <li><code>LEKTOR_ONION_URL_LOCK_FILTER</code>: This is the color of the lock icon next to the onion URL in RGB                                 hexadecimal format (ffffff) or (fff).</li> <li><code>LEKTOR_ONION_URL</code>: This is the onion URL of the service.</li> <li><code>LEKTOR_SERVICE_NAME</code>: This sets the service name / project title.</li> <li><code>LEKTOR_SERVICE_URL</code>: Sets the regular (i.e, the non-onion) URL for the service.</li> <li><code>LEKTOR_ASSET_REPOSITORY_URL</code>: The URL of a public Git repository with                                  additional assets to be cloned into <code>assets/custom</code>, allowing customizations                                  such as the logo and favicon.</li> <li><code>LEKTOR_FAVICON</code>: The favicon path relative to the <code>assets</code> folder, such as <code>/custom/my-icon.svg</code>.</li> <li><code>LEKTOR_LOGO_PATH</code>: The logo path relative to the <code>assets</code> folder, such as <code>/custom/my-logo.png</code>.</li> <li><code>LEKTOR_DEFAULT_LANGUAGE</code>: The default language of the site, such as <code>en</code>.</li> <li><code>LEKTOR_AVAILABLE_LANGUAGES</code>: Limit the available languages to a subset, such as <code>en am ar</code>.                                 Please note that english will always be enabled, even if not explicitly configured,                                 since it works as a base language for all other translations.</li> </ul> <p>An example build command would like something like the following:</p> <pre><code>LEKTOR_FOREGROUND_COLOR=FF0000 \\\nLEKTOR_BACKGROUND_COLOR=FF7700 \\\nLEKTOR_BUTTON_COLOR=3377FF \\\nLEKTOR_ONION_URL_LOCK_FILTER=FF0000 \\\nLEKTOR_ONION_URL='https://abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz1234.onion' \\\nLEKTOR_FAVICON='/custom/my-icon.svg' \\\nLEKTOR_LOGO_PATH='/custom/my-logo.png' \\\nlektor build\n</code></pre> <p>It's a long build command, but ideally would only be run by a script. See below for examples.</p>"},{"location":"deploy/","title":"Deploying","text":""},{"location":"deploy/#gitlab-deployments","title":"GitLab deployments","text":"<p>The <code>deploy-onion-launchpad-on-gitlab</code> allows for a semi-automated deployment procedure on GitLab.</p>"},{"location":"deploy/#installation","title":"Installation","text":"<ol> <li>Setup a GitLab account for the deployments. Make sure that this account is    validated to run CI/CD jobs.</li> <li>Setup GitLab authentication for this account.</li> <li>Install python-gitlab.    For Debian, the package is python3-gitlab.</li> <li>Configure python-gitlab by creating a <code>~/.python-gitlab.cfg</code> file. Use the provided    .python-gitlab.cfg.sample as example.</li> </ol>"},{"location":"deploy/#configuration","title":"Configuration","text":"<p>Copy from the example provided by Onion Launchpad:</p> <pre><code>cp /path/to/onion-launchpad/configs/deploy/onion-launchpad-test.gitlab.io.ini\n   gitlab/$somesite.gitlab.io.ini\n</code></pre> <p>Or copy from an existing configuration:</p> <pre><code>cp gitlab/$agency/$someothersite.ini gitlab/$somesite.ini\n</code></pre> <p>Then ajust the settings:</p> <pre><code>$EDITOR gitlab/$somesite.ini\n</code></pre>"},{"location":"deploy/#deployment","title":"Deployment","text":"<p>First, manually create a new group on GitLab. Due to abuse in the automated group creation, this step cannot be automated.</p> <p>Then use the GitLab deployment script provided by Onion Launchpad:</p> <pre><code>/path/to/onion-launchpad/scripts/deploy-onion-launchpad-on-gitlab \\\n  gitlab/$somesite.gitlab.io.ini\n</code></pre>"},{"location":"deploy/#github-deployments","title":"GitHub deployments","text":"<p>The <code>deploy-onion-launchpad-on-github</code> allows for a semi-automated deployment procedure on GitHub.</p>"},{"location":"deploy/#installation_1","title":"Installation","text":"<ol> <li>Setup a GitHub account for the deployments.</li> <li>Setup GitHub access token for this account with the <code>repo</code> and <code>admin:org</code> scopes.</li> <li>Install PyGithub (the Debian package is pygithub) and GitPython    (python3-git Debian package).</li> <li>Create a <code>~/.pygithub.cfg</code> file. Use the the provided .pygithub.cfg.sample as example.</li> </ol>"},{"location":"deploy/#configuration_1","title":"Configuration","text":"<p>Configuration is analogous to the GitLab procedure, but use the provided GitHub config sample instead:</p> <pre><code>cp /path/to/onion-launchpad/configs/deploy/onion-launchpad-test.github.io.ini \\\n   gitlab/$somesite.github.io.ini\n</code></pre>"},{"location":"deploy/#deployment_1","title":"Deployment","text":"<p>First, manually create a new organization on GitHub, as this step currently cannot be automated.</p> <p>Then use the GitLab deployment script provided by Onion Launchpad:</p> <pre><code>/path/to/onion-launchpad/scripts/deploy-onion-launchpad-on-github \\\n  gitlab/$somesite.github.io.ini\n</code></pre>"},{"location":"install/","title":"Installation","text":""},{"location":"install/#getting-the-code","title":"Getting the code","text":"<p>The Onion Launchpad codebase can be obtained directly from the repository by running the following command:</p> <pre><code>git clone --recursive https://gitlab.torproject.org/tpo/onion-services/onion-launchpad.git\n</code></pre>"},{"location":"install/#dependencies","title":"Dependencies","text":"<p>This project relies on Lektor and some dependencies detailed at the TPA CI templates project.</p> <p>A provision script is available as an example of dependency installation from a [Debian][] stable system, and can be adapted to your own environment and needs.</p> <p>Debian</p>"},{"location":"l10n/","title":"Localization","text":""},{"location":"l10n/#adding-a-new-rtl-language","title":"Adding a new RTL language","text":"<p>If you end up enabling translation support for a right-to-left (RTL) language, be sure to add the language's ISO 639-1/ISO 639-3 codes (add both if the language has both) to the <code>rtl</code> list in <code>databags/alternatives.json</code>:</p> <pre><code>{\n    \"rtl\": [..., ISO 639 code here, ...]\n}\n</code></pre> <p>The <code>page.html</code> template uses this databag to decide if the page should be displayed as RTL. If your new RTL language isn't in the databag, it will be rendered \"mirrored\" to how it should be, like left-to-right languages are.</p>"},{"location":"security/","title":"Security","text":""},{"location":"security/#threat-model","title":"Threat model","text":"<p>An Onion Launchpad landing page is a regular site providing information about how to connect to a specific Onion Service.</p> <p>In contexts of internet censorship, it can offer alternative ways to connect to a web site that also have enhanced privacy guarantees. By relying on collateral freedom, service operators can host landing pages in providers that are \"too big to block\".</p> <p>Since it's safe to assume that an user accessing such a landing page is probably not using the Tor Browser (since the user is looking for ways to accessing a given blocked site), we cannot assume that the user has set all the privacy protections offered by Tor Browser.</p> <p>That's a chicken-and-egg problem: in order to give users the power to access content more safely, the landing pages (or any other portal like a Tor Browser download page) cannot offer user all access safeguards without leaking some information like the landing page address. So there are inherent trade-offs during this \"bootstrap phase\".</p> <p>There are known risks and they can be minimized, but to do that it's important to consider a threat model not just of anonymized metrics collection but also from the landing page usage in general.</p> <p>In a broader sense, accessing a landing pages for Onion Services also involves the following:</p> <ol> <li> <p>Knowing the landing page address beforehand.</p> </li> <li> <p>Making a DNS query asking for the IP address where the landing page is hosted:</p> <ul> <li>DNS queries to the provider can be intercepted by an attacker, as they're usually   not encrypted.</li> <li>That may:<ul> <li>Leak that the user is trying to access a given landing page (and hence     can be inferred that the user is trying to bypass censorship).</li> <li>Allow for censoring the landing page at the DNS level.</li> <li>Allowing for attackers to provide the IP address of a fake landing     page without HTTPS.</li> </ul> </li> <li>Mitigations:<ul> <li>Use DNS-over-HTTPS or DNS-over-TLS, but it cannot be assumed that the     user has these in place.</li> <li>Host the landing page only in a path from an existing platform, such     as https://example.net/the-landing-page instead of     https://the-landing-page.example.net, but that do not protect against     tampering the DNS response, but only from censors discovering the landing     page address.</li> <li>Use a VPN to access the landing page, but an user doing this may already     be able to access the service.</li> </ul> </li> </ul> </li> <li> <p>Making a TLS connection to the IP address where the landing page is hosted:</p> <ul> <li>The client connection will use a Server Name Indicator (SNI) during the   handshake process.</li> <li>That may:<ul> <li>Leak that the user is trying to access a given landing page (and hence     can be inferred that the user is trying to bypass censorship).</li> <li>Allow for censoring the landing page by dropping the TLS handshake     connection.</li> </ul> </li> <li>Mitigations:<ul> <li>Use ECH (Encrypted Client Hello), but that is not yet a standard,     widely deployed or available for production systems.</li> <li>Host the landing page only at a path from an existing platform, such     as https://example.net/the-landing-page instead of     https://the-landing-page.example.net.</li> <li>Use a VPN to access the landing page, but an user doing this may already     be able to access the service.</li> </ul> </li> </ul> </li> </ol> <p>The following attack surface should also be considered:</p> <ol> <li> <p>HTTP downgrade, where an attacker can prevent the connection to the landing    page be upgrade to HTTPS.</p> <ul> <li>That may:<ul> <li>Allow attackers to inject arbitrary content to the landing page, which   may lead the user to download non-official, malicious versions of Tor Browser   and/or to offer the wrong .onion address for the service.</li> </ul> </li> <li>Mitigations:<ul> <li>Recent changes in browsers that don't allow unencrypted HTTP connections,   which my be widely deployed these days.</li> <li>Always provide the link to the landing page with <code>https://</code>.</li> </ul> </li> </ul> </li> <li> <p>Landing page censorship:</p> <ul> <li>Mitigations:<ul> <li>Provide many landing page mirrors using the collateral freedom   approach and inform the user about each available option.</li> </ul> </li> </ul> </li> <li> <p>Data retention: the hosting provider may have a retention policy that keeps    data with IP addresses stored for long periods.</p> <ul> <li>That may:<ul> <li>Allow for adversaries to request (or hack, if they can) to these logs   to get user-identifiable information.</li> </ul> </li> <li>Mitigations:<ul> <li>It may be hard for providers to comply with requests for disclosing read   access to a landing page given that this usually don't break any law   in the jurisdiction the page is hosted.</li> </ul> </li> </ul> </li> </ol> <p>Conclusions:</p> <ol> <li> <p>In general, landing pages hosted with custom subdomains are not an ideal    solution for places where there's not just censorship but also persecution    of persons that tries to bypass it.</p> </li> <li> <p>If the scenario is only general censorship, accessing landing pages using    HTTPS usually won't add any additional harm to the user and the trade-off is    smaller.</p> </li> </ol>"}]}